import React, { useEffect, useState } from 'react';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { db } from '../services/Firebase'; // Import Firebase db reference
import { ref, get } from 'firebase/database';

const Patientpage = () => {
  const [rfidNumber, setRfidNumber] = useState('');
  const [patientDetails, setPatientDetails] = useState(null);
 
  const [filteredPrescriptions, setFilteredPrescriptions] = useState([]);
  const [selectedDate, setSelectedDate] = useState(''); // State to hold the selected date for filtering

  const [showSubmitButton, setShowSubmitButton] = useState(true); // State to control the visibility of the submit button

  useEffect(() => {
    const ws = new WebSocket('ws://192.168.4.226:81');
    ws.onopen = () => {
      console.log('WebSocket connection opened');
    };
    ws.onmessage = (event) => {
      const message = event.data;
      if (message.startsWith('RFID:')) {
        const tagNumber = message.substring(5);
        setRfidNumber(tagNumber);
        
      }
    };
    ws.onerror = (error) => {
      console.error('WebSocket connection error:', error);
    };
    ws.onclose = () => {
      console.log('WebSocket connection closed');
    };

    return () => {
      ws.close();
    };
  }, []);

  const fetchPatientDetails = (patientId) => {
    const dt = ref(db, `prescriptions/${patientId}`);
    get(dt)
      .then((snapshot) => {
        if (snapshot.exists()) {
          const patientData = snapshot.val();
          setPatientDetails(patientData);
          setFilteredPrescriptions(patientData.prescriptions);
        } else {
          console.error('No data available for the specified patient ID.');
        }
      })
      .catch((error) => {
        console.error('Error fetching patient details:', error);
      });
  };

  const handleDateFilter = () => {
    if (rfidNumber && selectedDate && patientDetails && patientDetails[rfidNumber] && patientDetails[rfidNumber].Details[selectedDate]) {
      const prescriptions = patientDetails[rfidNumber].Details[selectedDate];
      setFilteredPrescriptions([prescriptions]);
    } else {
      setFilteredPrescriptions([]);
    }
  };
  
  
  const handleDateChange = (date) => {
    setSelectedDate(date); 
  };

  const handleInputChange = (event) => {
    setRfidNumber(event.target.value);
    //setShowSubmitButton(false); // Hide submit button when input changes
  };

  const handleSubmit = () => {
    // Handle submission logic here, such as fetching patient details
    fetchPatientDetails(rfidNumber);
    setShowSubmitButton(true); 
  };

  return (
    <div>
      <h1>Patient Page</h1>
      <form>
        <label>
          Enter Tag Number:
          <input type="text" value={rfidNumber} onChange={handleInputChange} />
        </label>
      </form>
      {showSubmitButton && (
        <button onClick={handleSubmit}>Submit</button>
      )}
      {patientDetails && (
        <div>
          <h2>Patient Details</h2>
          <p>Patient ID: {rfidNumber}</p>
          {/* Display other patient details */}

          <div>
            <h3>Filter Medical Records</h3>

        <label>
          Select Date:
          <input type="date" value={selectedDate} onChange={handleDateChange} />
        </label>
        <button onClick={handleDateFilter}>Apply Filter</button>
      
          </div>

          <div>
            <h3>Prescriptions</h3>
            {filteredPrescriptions && filteredPrescriptions.length > 0 ?  (
          <table>
            <thead>
              <tr>
                <th>Medicine</th>
                <th>Morning</th>
                <th>Afternoon</th>
                <th>Evening</th>
                <th>Night</th>
                <th>Count</th>
                <th>Duration</th>
                <th>BF_AF</th>
                <th>Days</th>
                <th>Price</th>
              </tr>
            </thead>
            <tbody>
              {filteredPrescriptions.map((prescription, index) => (
                <tr key={index}>
                  <td>{Object.keys(prescription)[0]}</td>
                  <td>{prescription[Object.keys(prescription)[0]].Morning}</td>
                  <td>{prescription[Object.keys(prescription)[0]].Afternoon}</td>
                  <td>{prescription[Object.keys(prescription)[0]].Evening}</td>
                  <td>{prescription[Object.keys(prescription)[0]].Night}</td>
                  <td>{prescription[Object.keys(prescription)[0]].count}</td>
                  <td>{prescription[Object.keys(prescription)[0]].days}</td>
                  <td>{prescription[Object.keys(prescription)[0]].BF_AF}</td>
                  <td>{prescription[Object.keys(prescription)[0]].price}</td>
                </tr>
              ))}
            </tbody>
          </table>
        ) : (
          <p>No prescriptions available</p>
        )}
          </div>
        </div>
      )}
    </div>
  );
};

export default Patientpage;
